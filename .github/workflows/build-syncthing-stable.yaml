name: Build Syncthing Custom

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag name (e.g., v1.27.0-custom)'
        required: false
        default: ''
  # 推送到主分支时触发
  push:
    branches: [ main, master ]

env:
  # Go 版本设置
  GO_VERSION: "~1.22.0"
  
  # 优化兼容性设置
  GO386: softfloat
  GOARM: "5"
  GOMIPS: softfloat
  
  # 构建元数据
  BUILD_USER: builder
  BUILD_HOST: github.actions

jobs:
  # 构建多平台版本
  build-cross-platform:
    name: Build cross platform
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux 平台
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: linux
            goarch: arm
            suffix: linux-arm
          - goos: linux
            goarch: 386
            suffix: linux-386
          # Windows 平台  
          - goos: windows
            goarch: amd64
            suffix: windows-amd64
          - goos: windows
            goarch: arm64
            suffix: windows-arm64
          - goos: windows
            goarch: 386
            suffix: windows-386
          # macOS 平台
          - goos: darwin
            goarch: amd64
            suffix: macos-amd64
          - goos: darwin
            goarch: arm64
            suffix: macos-arm64
          # FreeBSD 平台
          - goos: freebsd
            goarch: amd64
            suffix: freebsd-amd64
          - goos: freebsd
            goarch: arm64
            suffix: freebsd-arm64
    
    steps:
      - name: Checkout current source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          check-latest: true

      - name: Build binary
        run: |
          # 构建 - 使用 -goos 和 -goarch 参数而不是环境变量
          go run build.go -goos ${{ matrix.goos }} -goarch ${{ matrix.goarch }} build syncthing
          
          # 重命名二进制文件
          if [ "${{ matrix.goos }}" = "windows" ]; then
            mv syncthing.exe syncthing-${{ matrix.suffix }}.exe
            BINARY_NAME="syncthing-${{ matrix.suffix }}.exe"
          else
            mv syncthing syncthing-${{ matrix.suffix }}
            BINARY_NAME="syncthing-${{ matrix.suffix }}"
          fi
          
          # 输出文件信息
          ls -la $BINARY_NAME
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: syncthing-${{ matrix.suffix }}
          path: syncthing-${{ matrix.suffix }}*
          retention-days: 7

  # 创建 Release
  create-release:
    name: Create Release
    needs: [build-cross-platform]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
          check-latest: true

      - name: Get version info
        id: version
        run: |
          # 获取当前代码的版本信息
          VERSION=$(go run build.go version)
          echo "Current version: $VERSION"
          
          # 如果手动指定了 release tag，使用指定的
          if [ -n "${{ github.event.inputs.release_tag }}" ]; then
            RELEASE_TAG="${{ github.event.inputs.release_tag }}"
          else
            # 使用当前版本加上时间戳
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            RELEASE_TAG="$VERSION-$TIMESTAMP"
          fi
          
          echo "Release tag: $RELEASE_TAG"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release-files
          
          # 移动所有构建文件到 release-files 目录
          find artifacts -name "syncthing-*" -type f -exec cp {} release-files/ \;
          
          # 创建校验和文件
          cd release-files
          sha256sum syncthing-* > sha256sum.txt
          ls -la

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.release_tag }}
          name: Syncthing Custom ${{ steps.version.outputs.release_tag }}
          body: |
            ## Syncthing Custom Build ${{ steps.version.outputs.release_tag }}
            
            这是基于当前代码的自定义构建版本。
            
            **基础版本**: ${{ steps.version.outputs.version }}  
            **构建时间**: ${{ github.run_id }}  
            **提交哈希**: ${{ github.sha }}
            
            ### 支持的平台
            - Linux (amd64, arm64, arm, 386)
            - Windows (amd64, arm64, 386)  
            - macOS (amd64, arm64)
            - FreeBSD (amd64, arm64)
            
            ### 下载说明
            - 下载对应您系统架构的二进制文件
            - Linux/macOS 用户请给文件添加执行权限：`chmod +x syncthing-*`
            - 校验文件完整性请参考 `sha256sum.txt`
            
            ### 源码
            基于提交: ${{ github.sha }}
          draft: false
          prerelease: true
          files: release-files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 构建 Docker 镜像（可选）
  build-docker:
    name: Build Docker Image
    needs: [build-cross-platform]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          check-latest: true

      - name: Build for Docker (multi-arch)
        run: |
          # 构建多架构的二进制文件用于 Docker
          for arch in amd64 arm64 arm; do
            echo "Building for linux/$arch"
            go run build.go -goos linux -goarch $arch build syncthing
            mv syncthing syncthing-linux-$arch
          done

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (local)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: false
          tags: |
            syncthing-custom:latest
            syncthing-custom:dev 