name: 构建 Syncthing 稳定版

# 当推送到主分支、发布分支或创建标签时触发
on:
  push:
    branches: [ "main", "release*" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# 设置环境变量
env:
  GO_VERSION: "~1.24.0"  # Go 版本
  GOMIPS: softfloat
  LOGGER_DISCARD: "1"
  BUILD_USER: builder
  BUILD_HOST: github.syncthing.net
  TAGS: "netgo osusergo sqlite_omit_load_extension"

jobs:
  build:
    name: 构建二进制文件
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # 暂时排除一些不常用的架构组合
          - goos: darwin
            goarch: arm64
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          # 获取完整的 Git 历史记录，这对版本构建很重要
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          check-latest: true

      - name: Build binary
        run: |
          # 获取版本信息 - 确保使用 tag 版本而不是 commit hash
          if [[ "$GITHUB_REF" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            # 如果是 tag 触发，提取 tag 版本
            VERSION_TAG=${GITHUB_REF#refs/tags/}
            echo "Building tagged version: $VERSION_TAG"
            go run build.go -goos ${{ matrix.goos }} -goarch ${{ matrix.goarch }} -version "$VERSION_TAG" build syncthing
          else
            # 非 tag 触发，使用默认版本获取方式
            VERSION_INFO=$(go run build.go version)
            echo "Building development version: $VERSION_INFO"
            
            # 验证版本格式 - 确保不是单纯的 commit hash
            if [[ "$VERSION_INFO" =~ ^[0-9a-f]{8,40}$ ]]; then
              echo "Error: Version appears to be just a commit hash: $VERSION_INFO"
              echo "Expected format like: v1.2.3 or v1.2.3-dev.X.gABCDEF"
              exit 1
            fi
            
            go run build.go -goos ${{ matrix.goos }} -goarch ${{ matrix.goarch }} build syncthing
          fi
          
          # 重命名二进制文件
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="syncthing-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
            mv syncthing.exe $BINARY_NAME
          else
            BINARY_NAME="syncthing-${{ matrix.goos }}-${{ matrix.goarch }}"
            mv syncthing $BINARY_NAME
          fi
          
          # 输出文件信息
          ls -la $BINARY_NAME
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

      - name: 验证二进制文件
        run: |
          # 检查文件是否存在且可执行
          if [ ! -f "$BINARY_NAME" ]; then
            echo "Error: Binary file $BINARY_NAME not found"
            exit 1
          fi
          
          # 输出文件大小
          echo "Binary size: $(stat -c%s $BINARY_NAME) bytes"
          
          # 验证版本信息（仅对当前平台的二进制文件）
          if [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "amd64" ]; then
            echo "Verifying version information..."
            chmod +x $BINARY_NAME
            ./$BINARY_NAME --version
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: syncthing-${{ matrix.goos }}-${{ matrix.goarch }}
          path: syncthing-${{ matrix.goos }}-${{ matrix.goarch }}*
          retention-days: 30
          if-no-files-found: error

  # 创建发布（仅当推送标签时）
  release:
    name: 创建 GitHub 发布
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 准备发布文件
        run: |
          # 创建发布目录
          mkdir -p release
          
          # 移动所有二进制文件到发布目录
          find ./artifacts -name "syncthing-*" -type f -exec mv {} release/ \;
          
          # 列出发布文件
          echo "Release files:"
          ls -la release/

      - name: 提取变更日志
        id: changelog
        run: |
          # 获取标签名
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # 生成简单的变更日志
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## Syncthing $TAG_NAME" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 构建信息" >> $GITHUB_OUTPUT
          echo "- 构建时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          echo "- 提交: ${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "- 分支: ${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### 支持的平台" >> $GITHUB_OUTPUT
          echo "- Linux (amd64, arm64)" >> $GITHUB_OUTPUT
          echo "- Windows (amd64, arm64)" >> $GITHUB_OUTPUT
          echo "- macOS (amd64)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 创建 GitHub 发布
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag_name }}
          release_name: Syncthing ${{ steps.changelog.outputs.tag_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(steps.changelog.outputs.tag_name, 'rc') || contains(steps.changelog.outputs.tag_name, 'beta') || contains(steps.changelog.outputs.tag_name, 'alpha') }}

      - name: 上传发布文件
        run: |
          # 安装 GitHub CLI（如果没有）
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            sudo apt-get update
            sudo apt-get install -y gh
          fi
          
          # 上传所有二进制文件
          for file in release/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file..."
              gh release upload ${{ steps.changelog.outputs.tag_name }} "$file"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 总结作业
  summary:
    name: 构建总结
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 显示构建状态
        run: |
          echo "## 构建总结"
          echo "构建作业状态: ${{ needs.build.result }}"
          
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "✅ 所有平台构建成功"
          else
            echo "❌ 构建失败或被取消"
          fi
          
          echo "触发事件: ${{ github.event_name }}"
          echo "引用: ${{ github.ref }}"
          echo "提交: ${{ github.sha }}" 